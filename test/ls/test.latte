; vim: set syn=lisp:
;procedure pyramid n
;with i, j
;    for i from 1 to n
;        for j from 1 to i
;            write "*"
;        write "\n"
;
;procedure pyramids n
;with i
;    for i from 1 to n
;        print "Pyramid of size ", i
;        print
;        pyramid i
;
;function factorial(n)
;    if n < 0
;        error "factorial(n) is only defined for n >= 0"
;    else if n = 0 or n = 1
;        return 1
;    else
;        return n * factorial(n)
;
;function factorial2(n)
;with i, product
;    if n < 0
;        error "factorial2(n) is only defined for n >= 0"
;    product := 1
;    for i from n to 2 by -1
;        product := product * i
;    return product
;
procedure my_print x
    print x

procedure main
    my_print "a" ~ "b"
    ;print "a" ~ "b"
;    pyramids factorial(5)

;procedure f
;    print trueth
;procedure add_echoed_input my_list
;with m, n
;    write "Please enter some word"
;    get answer
;    for m from 1 to n
;        append my_list, answer
;
;function a(b)
;    if b
;        return 1
;    else if c
;        return nothing
;    else
;        return 3
;function f(x)
;    if x < 1
;        return 1
;    else if x = 0
;        return "potato"
;    else
;        return x * f(x - 1)

;procedure main
;    print "Hello", "world!"
;x := 1
;x@i := 2
;x@#x := "end"
;print f(x, x + 2)
;print -f(+x)
;while true
;    x
;for x in xs
;    print x
;for x from a to b by c
;    print x
;until 2 + 2 = 5
;    print "Oh no, infinite loop!"
;print 1 < 2 and 3 + 4 = 7 or true
;print 1 + 2*3+(4 + 5)/6
;print 3.14
;print 3
;print 1/-a
;print 1 + (+2)
;print 1^2^3
;print 1 + 2 * 3 ^ 5 ^ 6
;print [[1, 2], [[3]], [[[4]]]]
;print [1 + 2, 3 + 4 * 5]
;print 2^3
;print [3, 4]@1
;print #a
;print []
;print [1]
;print 1
;print #[]
;print #([#([a])])
;print #(xss@1)
;print true and (#[1, 2] > 2)
;print #[1, 2, 3]
;print a@(b+c)
;;; Syntax Error
;print ##a
;print a + (b + c)
;print "Hello"
;print "This is a \"quote\""
;print "This is a \\ slash"
;print "Con" ~ "cat", "e" ~ "n" ~ "ation"
;print true
;print true and false or false
;print 1 + 1 < 3
;print 1 ~ 2
;print (1 + 2) <= 4
;print 1 and 2
;while
;    pass
;while
;    pass
;a b, 1, 2, 3
;print 1 + 2
;print 1 + 2 * 3
;print 1 + +2
;while
;    b c, d, e
;    while
;        c
;        d
;e
